/**

Copyright 2019 Forestry.io Inc


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
export interface ThemeProps {
    theme: {
        tinacms?: Theme;
    };
}
export interface Theme {
    color: {
        primary: {
            light: string;
            medium: string;
            dark: string;
        };
        error: {
            light: string;
            medium: string;
            dark: string;
        };
        grey: {
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
        };
    };
    radius: {
        small: string;
        big: string;
    };
    padding: {
        small: string;
        big: string;
    };
    font: {
        size: {
            0: string;
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
        };
        weight: {
            regular: number;
            bold: number;
        };
    };
    shadow: {
        small: string;
        big: string;
    };
    timing: {
        short: string;
        medium: string;
        long: string;
    };
}
export declare const DefaultTheme: Theme;
declare function primary(value?: keyof Theme['color']['primary']): (props: ThemeProps) => string;
declare function grey(value?: keyof Theme['color']['grey']): (props: ThemeProps) => string;
declare function error(value?: keyof Theme['color']['error']): (props: ThemeProps) => string;
export declare const color: {
    primary: typeof primary;
    grey: typeof grey;
    error: typeof error;
};
declare function size(value?: keyof Theme['font']['size']): (props: ThemeProps) => string;
declare function weight(value?: keyof Theme['font']['weight']): (props: ThemeProps) => number;
export declare const font: {
    size: typeof size;
    weight: typeof weight;
};
export declare const radius: (size?: "small" | "big") => (props: ThemeProps) => string;
export declare const padding: (size?: "small" | "big") => (props: ThemeProps) => string;
export declare const shadow: (size?: "small" | "big") => (props: ThemeProps) => string;
export declare const timing: (length: "medium" | "short" | "long") => (props: ThemeProps) => string;
export declare const GlobalStyles: import("styled-components").GlobalStyleComponent<{}, import("styled-components").DefaultTheme>;
export declare const TinaResetStyles: import("styled-components").FlattenSimpleInterpolation;
export declare const TinaReset: import("styled-components").StyledComponent<"div", any, {}, never>;
export {};
