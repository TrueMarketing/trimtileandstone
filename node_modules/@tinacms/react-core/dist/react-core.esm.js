import { createContext, useContext, useEffect, useState, createElement } from 'react';
import { Form } from '@tinacms/core';

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
var ERROR_MISSING_CMS = "useCMS could not find an instance of CMS";
var CMSContext =
/*#__PURE__*/
createContext(null);
function useCMS() {
  var cms = useContext(CMSContext);

  if (!cms) {
    throw new Error(ERROR_MISSING_CMS);
  }

  return cms;
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * A React Hook for adding Plugins to the CMS.
 *
 * @alias usePlugins
 */

var usePlugin = usePlugins;
/**
 *
 * @alias usePlugin
 */

function usePlugins(plugins) {
  var cms = useCMS();
  var pluginArray;

  if (Array.isArray(plugins)) {
    pluginArray = plugins;
  } else {
    pluginArray = [plugins];
  }

  useEffect(function () {
    pluginArray.forEach(function (plugin) {
      if (plugin) {
        cms.plugins.add(plugin);
      }
    });
    return function () {
      pluginArray.forEach(function (plugin) {
        if (plugin) {
          cms.plugins.remove(plugin);
        }
      });
    };
  }, [cms.plugins].concat(pluginArray));
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
function useLocalForm(options, watch) {
  if (watch === void 0) {
    watch = {};
  }

  /**
   * We're returning early here which means all the hooks called by this hook
   * violate the rules of hooks. In the case of the check for
   * `NODE_ENV === 'production'` this should be a non-issue because NODE_ENV
   * will never change at runtime.
   */
  if (process.env.NODE_ENV === 'production') {
    return [options.initialValues, undefined];
  }
  /* eslint-disable-next-line react-hooks/rules-of-hooks */


  var _useForm = useForm(options, watch),
      values = _useForm[0],
      form = _useForm[1];
  /* eslint-disable-next-line react-hooks/rules-of-hooks */


  usePlugins(form);
  return [values, form];
}
/**
 * @alias useLocalForm
 */

var useCMSForm = useLocalForm;
/**
 * A hook that creates a form and updates it's watched properties.
 */

function useForm(options, watch) {
  if (watch === void 0) {
    watch = {};
  }

  var _React$useState = useState(),
      form = _React$useState[0],
      setForm = _React$useState[1];

  var _React$useState2 = useState(options.initialValues),
      setValues = _React$useState2[1];

  useEffect(function createForm() {
    if (!options.initialValues) return;
    var form = new Form(options);
    setForm(form);
    var unsubscribe = form.subscribe(function (form) {
      setValues(form.values);
    }, {
      values: true
    });
    return function () {
      unsubscribe();
    };
  }, [options.id, !!options.initialValues]);
  useUpdateFormFields(watch.fields, form);
  useUpdateFormLabel(watch.label, form);
  useUpdateFormValues(watch.values, form);
  return [form ? form.values : options.initialValues, form];
}
/**
 * A React Hook that update's the `Form` if `fields` are changed.
 *
 * This hook is useful when dynamically creating fields, or updating
 * them via hot module replacement.
 */

function useUpdateFormFields(fields, form) {
  useEffect(function () {
    if (!form || typeof fields === 'undefined') return;
    form.updateFields(fields);
  }, [form, fields]);
}
/**
 * A React Hook that update's the `Form` if the `label` is changed.
 *
 * This hook is useful when dynamically creating creating the label,
 * or updating it via hot module replacement.
 */


function useUpdateFormLabel(label, form) {
  useEffect(function () {
    if (!form || typeof label === 'undefined') return;
    form.label = label;
  }, [form, label]);
}
/**
 * Updates the Form with new values.
 *
 * Only updates fields that are:
 *
 * 1. registered with the form
 * 2. not currently [active](https://final-form.org/docs/final-form/types/FieldState#active)
 *
 * This hook is useful when the form must be kept in sync with the data source.
 */


function useUpdateFormValues(values, form) {
  useEffect(function () {
    if (!form || typeof values === 'undefined') return;
    form.updateValues(values);
  }, [form, values]);
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 *
 * @param subscribable An object that can be subscribed to
 * @param cb (Optional) A callback to be executed when an event occurs.
 */

function useSubscribable(subscribable, cb) {
  var _React$useState = useState(0),
      s = _React$useState[1];

  useEffect(function () {
    return subscribable.subscribe(function () {
      s(function (x) {
        return x + 1;
      });
      if (cb) cb();
    });
  });
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * Subscribes to value updates from the form with the given callback.
 */

function useWatchFormValues(form, cb) {
  useEffect(function () {
    if (!form) return; // `form.subscribe` sends the current state on-subscription.
    // We want to ignore that first call.

    var firstUpdate = true;
    return form.subscribe(function (formState) {
      if (firstUpdate) {
        firstUpdate = false;
      } else {
        cb(formState);
      }
    }, {
      values: true
    });
  }, [cb, form]);
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * A Higher-Order-Component for adding Plugins to the CMS.
 *
 * @param Component A React Component
 * @param plugin Plugin
 * @alias withPlugin
 */

function withPlugins(Component, plugins) {
  return function (props) {
    usePlugin(plugins);
    return createElement(Component, Object.assign({}, props));
  };
}
/**
 * A Higher-Order-Component for adding Plugins to the CMS.
 *
 * @param Component A React Component
 * @param plugin Plugin
 * @alias withPlugins
 */

var withPlugin = withPlugins;

export { CMSContext, ERROR_MISSING_CMS, useCMS, useCMSForm, useForm, useLocalForm, usePlugin, usePlugins, useSubscribable, useWatchFormValues, withPlugin, withPlugins };
//# sourceMappingURL=react-core.esm.js.map
