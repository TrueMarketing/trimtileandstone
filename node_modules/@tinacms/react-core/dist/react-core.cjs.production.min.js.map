{"version":3,"file":"react-core.cjs.production.min.js","sources":["../src/use-cms.ts","../src/use-plugin.tsx","../src/use-form.ts","../src/with-plugin.tsx","../src/use-subscribable.tsx","../src/use-watch-form-values.ts"],"sourcesContent":["/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport * as React from 'react'\nimport { CMS } from '@tinacms/core'\n\nexport const ERROR_MISSING_CMS = `useCMS could not find an instance of CMS`\n\nexport const CMSContext = React.createContext<CMS | null>(null)\n\nexport function useCMS(): CMS {\n  const cms = React.useContext(CMSContext)\n\n  if (!cms) {\n    throw new Error(ERROR_MISSING_CMS)\n  }\n\n  return cms\n}\n","/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport * as React from 'react'\nimport { Plugin } from '@tinacms/core'\nimport { useCMS } from './use-cms'\n\n/**\n * A React Hook for adding Plugins to the CMS.\n *\n * @alias usePlugins\n */\nexport const usePlugin = usePlugins\n\n/**\n *\n * @alias usePlugin\n */\nexport function usePlugins(plugins?: Plugin | Plugin[]) {\n  const cms = useCMS()\n\n  let pluginArray: (Plugin | undefined)[]\n\n  if (Array.isArray(plugins)) {\n    pluginArray = plugins\n  } else {\n    pluginArray = [plugins]\n  }\n\n  React.useEffect(() => {\n    pluginArray.forEach(plugin => {\n      if (plugin) {\n        cms.plugins.add(plugin);\n      }\n    })\n\n    return () => {\n      pluginArray.forEach(plugin => {\n        if (plugin) {\n          cms.plugins.remove(plugin);\n        }\n      })\n    }\n  }, [cms.plugins, ...pluginArray])\n}\n","/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport { FormOptions, Form, Field } from '@tinacms/core'\nimport * as React from 'react'\nimport { usePlugins } from './use-plugin'\n\nexport interface WatchableFormValue {\n  values: any\n  label: FormOptions<any>['label']\n  fields: FormOptions<any>['fields']\n}\n\nexport function useLocalForm<FormShape = any>(\n  options: FormOptions<any>,\n  watch: Partial<WatchableFormValue> = {}\n): [FormShape, Form | undefined] {\n  /**\n   * We're returning early here which means all the hooks called by this hook\n   * violate the rules of hooks. In the case of the check for\n   * `NODE_ENV === 'production'` this should be a non-issue because NODE_ENV\n   * will never change at runtime.\n   */\n  if (process.env.NODE_ENV === 'production') {\n    return [options.initialValues, undefined]\n  }\n\n  /* eslint-disable-next-line react-hooks/rules-of-hooks */\n  const [values, form] = useForm<FormShape>(options, watch)\n\n  /* eslint-disable-next-line react-hooks/rules-of-hooks */\n  usePlugins(form)\n\n  return [values, form]\n}\n\n/**\n * @alias useLocalForm\n */\nexport const useCMSForm = useLocalForm\n\n/**\n * A hook that creates a form and updates it's watched properties.\n */\nexport function useForm<FormShape = any>(\n  options: FormOptions<any>,\n  watch: Partial<WatchableFormValue> = {}\n): [FormShape, Form | undefined] {\n  const [form, setForm] = React.useState<Form | undefined>()\n  const [, setValues] = React.useState(options.initialValues)\n\n  React.useEffect(\n    function createForm() {\n      if (!options.initialValues) return\n      const form = new Form(options)\n      setForm(form)\n      const unsubscribe = form.subscribe(\n        form => {\n          setValues(form.values)\n        },\n        { values: true }\n      )\n\n      return () => {\n        unsubscribe()\n      }\n    },\n    [options.id, !!options.initialValues]\n  )\n\n  useUpdateFormFields(watch.fields, form)\n  useUpdateFormLabel(watch.label, form)\n  useUpdateFormValues(watch.values, form)\n\n  return [form ? form.values : options.initialValues, form]\n}\n/**\n * A React Hook that update's the `Form` if `fields` are changed.\n *\n * This hook is useful when dynamically creating fields, or updating\n * them via hot module replacement.\n */\nfunction useUpdateFormFields(fields?: Field[], form?: Form) {\n  React.useEffect(() => {\n    if (!form || typeof fields === 'undefined') return\n    form.updateFields(fields)\n  }, [form, fields])\n}\n\n/**\n * A React Hook that update's the `Form` if the `label` is changed.\n *\n * This hook is useful when dynamically creating creating the label,\n * or updating it via hot module replacement.\n */\nfunction useUpdateFormLabel(label?: string, form?: Form) {\n  React.useEffect(() => {\n    if (!form || typeof label === 'undefined') return\n    form.label = label\n  }, [form, label])\n}\n\n/**\n * Updates the Form with new values.\n *\n * Only updates fields that are:\n *\n * 1. registered with the form\n * 2. not currently [active](https://final-form.org/docs/final-form/types/FieldState#active)\n *\n * This hook is useful when the form must be kept in sync with the data source.\n */\nfunction useUpdateFormValues(values: any, form?: Form) {\n  React.useEffect(() => {\n    if (!form || typeof values === 'undefined') return\n    form.updateValues(values)\n  }, [form, values])\n}\n","/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport { Plugin } from '@tinacms/core'\nimport { usePlugin } from './use-plugin'\nimport * as React from 'react'\n\n/**\n * A Higher-Order-Component for adding Plugins to the CMS.\n *\n * @param Component A React Component\n * @param plugin Plugin\n * @alias withPlugin\n */\nexport function withPlugins(Component: any, plugins: Plugin | Plugin[]) {\n  return (props: any) => {\n    usePlugin(plugins)\n    return <Component {...props} />\n  }\n}\n\n/**\n * A Higher-Order-Component for adding Plugins to the CMS.\n *\n * @param Component A React Component\n * @param plugin Plugin\n * @alias withPlugins\n */\nexport const withPlugin = withPlugins\n","/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport * as React from 'react'\nimport { Subscribable } from '@tinacms/core'\n/**\n *\n * @param subscribable An object that can be subscribed to\n * @param cb (Optional) A callback to be executed when an event occurs.\n */\nexport function useSubscribable(subscribable: Subscribable, cb?: Function) {\n  const [, s] = React.useState(0)\n  React.useEffect(() => {\n    return subscribable.subscribe(() => {\n      s(x => x + 1)\n      if (cb) cb()\n    })\n  })\n}\n","/**\n\nCopyright 2019 Forestry.io Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport { Form } from '@tinacms/core'\nimport { FormSubscriber } from 'final-form'\nimport { useEffect } from 'react'\n\n/**\n * Subscribes to value updates from the form with the given callback.\n */\nexport function useWatchFormValues(\n  form: Form | undefined,\n  cb: FormSubscriber<any>\n) {\n  useEffect(() => {\n    if (!form) return\n\n    // `form.subscribe` sends the current state on-subscription.\n    // We want to ignore that first call.\n    let firstUpdate = true\n\n    return form.subscribe(\n      formState => {\n        if (firstUpdate) {\n          firstUpdate = false\n        } else {\n          cb(formState)\n        }\n      },\n      { values: true }\n    )\n  }, [cb, form])\n}\n"],"names":["ERROR_MISSING_CMS","CMSContext","React","useCMS","cms","Error","usePlugin","usePlugins","plugins","pluginArray","Array","isArray","forEach","plugin","add","remove","useLocalForm","options","watch","initialValues","undefined","useCMSForm","withPlugins","Component","props","withPlugin","form","setForm","setValues","Form","unsubscribe","subscribe","values","id","fields","updateFields","useUpdateFormFields","label","useUpdateFormLabel","updateValues","useUpdateFormValues","subscribable","cb","s","x","useEffect","firstUpdate","formState"],"mappings":"+DAqBaA,6CAEAC,EAAaC,gBAAgC,MAE1D,SAAgBC,QACRC,EAAMF,aAAiBD,OAExBG,QACG,IAAIC,MAAML,UAGXI,MCLIE,EAAYC,WAMTA,EAAWC,OAGrBC,EAFEL,EAAMD,IAKVM,EADEC,MAAMC,QAAQH,GACFA,EAEA,CAACA,GAGjBN,aAAgB,kBACdO,EAAYG,SAAQ,SAAAC,GACdA,GACFT,EAAII,QAAQM,IAAID,MAIb,WACLJ,EAAYG,SAAQ,SAAAC,GACdA,GACFT,EAAII,QAAQO,OAAOF,UAIvBT,EAAII,gBAAYC,aC9BNO,EACdC,EACAC,mBAAAA,IAAAA,EAAqC,IAS5B,CAACD,EAAQE,mBAAeC,OAetBC,EAAaL,WCzBVM,EAAYC,EAAgBf,UACnC,SAACgB,UACNlB,EAAUE,GACHN,gBAACqB,mBAAcC,KAW1B,IAAaC,EAAaH,kHDiBxBL,EACAC,YAAAA,IAAAA,EAAqC,UAEbhB,aAAjBwB,OAAMC,OACJC,EAAa1B,WAAee,EAAQE,yBAE7CjB,aACE,cACOe,EAAQE,mBACPO,EAAO,IAAIG,OAAKZ,GACtBU,EAAQD,OACFI,EAAcJ,EAAKK,WACvB,SAAAL,GACEE,EAAUF,EAAKM,UAEjB,CAAEA,QAAQ,WAGL,WACLF,QAGJ,CAACb,EAAQgB,KAAMhB,EAAQE,gBAe3B,SAA6Be,EAAkBR,GAC7CxB,aAAgB,WACTwB,QAA0B,IAAXQ,GACpBR,EAAKS,aAAaD,KACjB,CAACR,EAAMQ,IAhBVE,CAAoBlB,EAAMgB,OAAQR,GAyBpC,SAA4BW,EAAgBX,GAC1CxB,aAAgB,WACTwB,QAAyB,IAAVW,IACpBX,EAAKW,MAAQA,KACZ,CAACX,EAAMW,IA5BVC,CAAmBpB,EAAMmB,MAAOX,GAyClC,SAA6BM,EAAaN,GACxCxB,aAAgB,WACTwB,QAA0B,IAAXM,GACpBN,EAAKa,aAAaP,KACjB,CAACN,EAAMM,IA5CVQ,CAAoBtB,EAAMc,OAAQN,GAE3B,CAACA,EAAOA,EAAKM,OAASf,EAAQE,cAAeO,qGEhEtBe,EAA4BC,OACjDC,EAAKzC,WAAe,MAC7BA,aAAgB,kBACPuC,EAAaV,WAAU,WAC5BY,GAAE,SAAAC,UAAKA,EAAI,KACPF,GAAIA,+CCJZhB,EACAgB,GAEAG,aAAU,cACHnB,OAIDoB,GAAc,SAEXpB,EAAKK,WACV,SAAAgB,GACMD,EACFA,GAAc,EAEdJ,EAAGK,KAGP,CAAEf,QAAQ,OAEX,CAACU,EAAIhB"}