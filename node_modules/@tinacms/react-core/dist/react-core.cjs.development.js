'use strict';

var React = require('react');
var forms = require('@tinacms/forms');

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
var ERROR_MISSING_CMS = "useCMS could not find an instance of CMS";
var CMSContext =
/*#__PURE__*/
React.createContext(null);
function useCMS() {
  var cms = React.useContext(CMSContext);

  if (!cms) {
    throw new Error(ERROR_MISSING_CMS);
  }

  return cms;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * A React Hook for adding Plugins to the CMS.
 *
 * @alias usePlugins
 */

var usePlugin = usePlugins;
/**
 *
 * @alias usePlugin
 */

function usePlugins(plugins) {
  var cms = useCMS();
  var pluginArray;

  if (Array.isArray(plugins)) {
    pluginArray = plugins;
  } else {
    pluginArray = [plugins];
  }

  React.useEffect(function () {
    pluginArray.forEach(function (plugin) {
      if (plugin) {
        cms.plugins.add(plugin);
      }
    });
    return function () {
      pluginArray.forEach(function (plugin) {
        if (plugin) {
          cms.plugins.remove(plugin);
        }
      });
    };
  }, [cms.plugins].concat(pluginArray));
}

function useLocalForm(options, watch) {
  if (watch === void 0) {
    watch = {};
  }

  var _useForm = useForm(options, watch),
      values = _useForm[0],
      form = _useForm[1];

  usePlugins(form);
  return [values, form];
}
/**
 * @alias useLocalForm
 */

var useCMSForm = useLocalForm;
/**
 * A hook that creates a form and updates it's watched properties.
 */

function useForm(_ref, watch) {
  var loadInitialValues = _ref.loadInitialValues,
      options = _objectWithoutPropertiesLoose(_ref, ["loadInitialValues"]);

  if (watch === void 0) {
    watch = {};
  }

  /**
   * `initialValues` will be usually be undefined if `loadInitialValues` is used.
   *
   * If the form helper is using `watch.values`, which would contain
   * the current state of the form, then we set that to the `initialValues`
   * so the form is initialized with some state.
   *
   * This is beneficial for SSR and will hopefully not be noticeable
   * when editing the site as the actual `initialValues` will be set
   * behind the scenes.
   */
  options.initialValues = options.initialValues || watch.values;

  var _React$useState = React.useState(options.initialValues),
      setValues = _React$useState[1];

  var _React$useState2 = React.useState(function () {
    return createForm(options, function (form) {
      setValues(form.values);
    });
  }),
      form = _React$useState2[0],
      setForm = _React$useState2[1];

  React.useEffect(function () {
    if (form.id === options.id) return;
    setForm(createForm(options, function (form) {
      setValues(form.values);
    }));
  }, [options.id]);
  React.useEffect(function () {
    if (loadInitialValues) {
      loadInitialValues().then(function (values) {
        form.updateInitialValues(values);
      });
    }
  }, [form]);
  useUpdateFormFields(form, watch.fields);
  useUpdateFormLabel(form, watch.label);
  useUpdateFormValues(form, watch.values);
  return [form ? form.values : options.initialValues, form];
}

function createForm(options, handleChange) {
  var form = new forms.Form(options);
  form.subscribe(handleChange, {
    values: true
  });
  return form;
}
/**
 * A React Hook that update's the `Form` if `fields` are changed.
 *
 * This hook is useful when dynamically creating fields, or updating
 * them via hot module replacement.
 */


function useUpdateFormFields(form, fields) {
  React.useEffect(function () {
    if (typeof fields === 'undefined') return;
    form.updateFields(fields);
  }, [form, fields]);
}
/**
 * A React Hook that update's the `Form` if the `label` is changed.
 *
 * This hook is useful when dynamically creating creating the label,
 * or updating it via hot module replacement.
 */


function useUpdateFormLabel(form, label) {
  React.useEffect(function () {
    if (typeof label === 'undefined') return;
    form.label = label;
  }, [form, label]);
}
/**
 * Updates the Form with new values.
 *
 * Only updates fields that are:
 *
 * 1. registered with the form
 * 2. not currently [active](https://final-form.org/docs/final-form/types/FieldState#active)
 *
 * This hook is useful when the form must be kept in sync with the data source.
 */


function useUpdateFormValues(form, values) {
  React.useEffect(function () {
    if (typeof values === 'undefined') return;
    form.updateValues(values);
  }, [form, values]);
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 *
 * @param subscribable An object that can be subscribed to
 * @param cb (Optional) A callback to be executed when an event occurs.
 */

function useSubscribable(subscribable, cb) {
  var _React$useState = React.useState(0),
      s = _React$useState[1];

  React.useEffect(function () {
    return subscribable.subscribe(function () {
      s(function (x) {
        return x + 1;
      });
      if (cb) cb();
    });
  });
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * Subscribes to value updates from the form with the given callback.
 */

function useWatchFormValues(form, cb) {
  React.useEffect(function () {
    if (!form) return; // `form.subscribe` sends the current state on-subscription.
    // We want to ignore that first call.

    var firstUpdate = true;
    return form.subscribe(function (formState) {
      if (firstUpdate) {
        firstUpdate = false;
      } else {
        cb(formState);
      }
    }, {
      values: true
    });
  }, [cb, form]);
}

/**

Copyright 2019 Forestry.io Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
/**
 * A Higher-Order-Component for adding Plugins to the CMS.
 *
 * @param Component A React Component
 * @param plugin Plugin
 * @alias withPlugin
 */

function withPlugins(Component, plugins) {
  return function (props) {
    usePlugin(plugins);
    return React.createElement(Component, Object.assign({}, props));
  };
}
/**
 * A Higher-Order-Component for adding Plugins to the CMS.
 *
 * @param Component A React Component
 * @param plugin Plugin
 * @alias withPlugins
 */

var withPlugin = withPlugins;

exports.CMSContext = CMSContext;
exports.ERROR_MISSING_CMS = ERROR_MISSING_CMS;
exports.useCMS = useCMS;
exports.useCMSForm = useCMSForm;
exports.useForm = useForm;
exports.useLocalForm = useLocalForm;
exports.usePlugin = usePlugin;
exports.usePlugins = usePlugins;
exports.useSubscribable = useSubscribable;
exports.useWatchFormValues = useWatchFormValues;
exports.withPlugin = withPlugin;
exports.withPlugins = withPlugins;
//# sourceMappingURL=react-core.cjs.development.js.map
